<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBwAAAEAIACYDgAAFgAAACgAAAAgAAAAOAAAAAEAIAAAAAAAAA4AACUWAAAlFgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe595AHWS
        cwKEsYIzhreEd4a4hIiHuISIh7iEiIe5hYiHuYWIh7mFiIe5hIiHuISIhriEiIa4hIiGuISIhriEiIe4
        hIiHuISIhriEiIa4hIiGuISHhriEh4a4g4eGt4Nyg7CBK1pdWwF2lnUAAAAAAAAAAAAAAAAAAAAAAHKS
        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
        /A/4H/wP/B48H/4GMD//AAB//8AB///wB/////////////////8=
</value>
  </data>
</root>